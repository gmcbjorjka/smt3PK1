/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.kelasC.Jpanel;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import com.kelasC.koneksi.koneksi;  // Assuming your package structure is correct
import com.kelasC.model.model_card;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author teguh
 */
public class dikirim extends javax.swing.JPanel {

    /**
     * Creates new form dikirim
     */
    public dikirim() {
        initComponents();
        refreshList();
        refreshtable();
        loadData();
        updateCardValues();
        txt_resi.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        card1 = new com.kelasC.Jpanel.component.card();
        card2 = new com.kelasC.Jpanel.component.card();
        card3 = new com.kelasC.Jpanel.component.card();
        jLabel1 = new javax.swing.JLabel();
        cb_karyawan = new javax.swing.JComboBox<>();
        txt_resi = new javax.swing.JTextField();
        bt_input = new javax.swing.JButton();
        bt_hapus = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabel = new javax.swing.JTable();
        btn_batal = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLayeredPane1.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        card1.setColor2(new java.awt.Color(0, 0, 153));
        jLayeredPane1.add(card1);

        card2.setColor2(new java.awt.Color(102, 0, 0));
        jLayeredPane1.add(card2);

        card3.setColor2(new java.awt.Color(102, 102, 0));
        jLayeredPane1.add(card3);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/kelasC/assets/image/Motorcycle Delivery Multiple Boxes.png"))); // NOI18N
        jLabel1.setText("KURIR YANG MENGIRIM");

        cb_karyawan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cb_karyawan.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(11, 101, 252), null, null));

        txt_resi.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(11, 101, 252)));
        txt_resi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_resiActionPerformed(evt);
            }
        });

        bt_input.setBackground(new java.awt.Color(11, 101, 252));
        bt_input.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        bt_input.setForeground(new java.awt.Color(255, 255, 255));
        bt_input.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/kelasC/assets/image/Add.png"))); // NOI18N
        bt_input.setText("INPUT");
        bt_input.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(11, 101, 252), null, null));
        bt_input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_inputActionPerformed(evt);
            }
        });

        bt_hapus.setBackground(new java.awt.Color(255, 0, 0));
        bt_hapus.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        bt_hapus.setForeground(new java.awt.Color(255, 255, 255));
        bt_hapus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/kelasC/assets/image/Delete.png"))); // NOI18N
        bt_hapus.setText("HAPUS");
        bt_hapus.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(11, 101, 252), null, null));
        bt_hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_hapusActionPerformed(evt);
            }
        });

        tabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nomer Resi", "Nama Pengirim", "No Kontak", "Kurir Yang Mengirim"
            }
        ));
        tabel.getTableHeader().setBackground(new java.awt.Color(255, 255, 102)); // Ganti dengan nilai warna RGB yang diinginkan

        // Mengubah warna garis tepi pada header
        tabel.getTableHeader().setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(43, 101, 252))); // Ganti dengan nilai warna RGB yang diinginkan
        tabel.setGridColor(new java.awt.Color(43, 101, 252));
        tabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabel);

        btn_batal.setBackground(new java.awt.Color(0, 153, 0));
        btn_batal.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_batal.setForeground(new java.awt.Color(255, 255, 255));
        btn_batal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/kelasC/assets/image/Cancel Order.png"))); // NOI18N
        btn_batal.setText("BATAL");
        btn_batal.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(11, 101, 252), null, null));
        btn_batal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_batalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cb_karyawan, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_resi, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bt_input, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bt_hapus, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_batal, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(247, Short.MAX_VALUE))))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bt_input, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_resi)
                    .addComponent(cb_karyawan)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bt_hapus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_batal)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1))
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void bt_inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_inputActionPerformed
        // TODO add your handling code here:
        input();
        
        txt_resi.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Call your input method when Enter is pressed
                input();
            }
        });

        // Add KeyListener to txt_resi to listen for other key events (e.g., for scanner input)
        txt_resi.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                // Not needed for Enter key
            }

            @Override
            public void keyPressed(KeyEvent e) {
                // Not needed for Enter key
            }

            @Override
            public void keyReleased(KeyEvent e) {
                // Call your input method when any key is released
                input();
            }
        });

        txt_resi.requestFocus();
    
        
    
    }//GEN-LAST:event_bt_inputActionPerformed

    private void tabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelMouseClicked
        // TODO add your handling code here:
        btn_batal.setVisible(true);
        bt_hapus.setVisible(true);
    }//GEN-LAST:event_tabelMouseClicked

    private void btn_batalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_batalActionPerformed
        // TODO add your handling code here:
        loadData();
    }//GEN-LAST:event_btn_batalActionPerformed

    private void bt_hapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_hapusActionPerformed
        // TODO add your handling code here:
        int selectedRow = tabel.getSelectedRow();

        if (selectedRow != -1) {
            int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus data ini?", "Konfirmasi", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                String no_res = tabel.getModel().getValueAt(selectedRow, 0).toString();
                String query = "DELETE FROM delivery WHERE no_resi = '" + no_res + "'";
                Connection c = koneksi.konek();

                try {
                    Statement s = c.createStatement();
                    int result = s.executeUpdate(query);

                    if (result > 0) {
                        // Jika hapus berhasil
                        JOptionPane.showMessageDialog(this, "Data berhasil dihapus", "Sukses", JOptionPane.INFORMATION_MESSAGE);

                        // Refresh tabel
                        loadData();
                        refreshtable();
                      
                    } else {
                        // Jika hapus gagal
                        JOptionPane.showMessageDialog(this, "Gagal menghapus data", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Terjadi kesalahan", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Pilih data yang akan dihapus", "Peringatan", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_bt_hapusActionPerformed

    private void txt_resiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_resiActionPerformed
        // TODO add your handling code here:
        input();
    }//GEN-LAST:event_txt_resiActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_hapus;
    private javax.swing.JButton bt_input;
    private javax.swing.JButton btn_batal;
    private com.kelasC.Jpanel.component.card card1;
    private com.kelasC.Jpanel.component.card card2;
    private com.kelasC.Jpanel.component.card card3;
    private static javax.swing.JComboBox<String> cb_karyawan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabel;
    private javax.swing.JTextField txt_resi;
    // End of variables declaration//GEN-END:variables

    private void refreshList() {
        try {
            String q = "SELECT * FROM kurir";
            Connection k = koneksi.konek();
            Statement s = k.createStatement();
            ResultSet r = s.executeQuery(q);
            cb_karyawan.removeAllItems();
            
            while (r.next()) {
                String ongkir = r.getString("nama_kurir");
                
                cb_karyawan.addItem(ongkir);
                
            }

        } catch (Exception e) {
        }
    }

    private void refreshtable() {
        try {
            DefaultTableModel m = (DefaultTableModel) tabel.getModel();

            String q = "SELECT * FROM delivery";
            Connection k = koneksi.konek();
            Statement s = k.createStatement();
            ResultSet r = s.executeQuery(q);
            m.getDataVector().removeAllElements();
            //int no = 1;
            while (r.next()) {
                String no_res = r.getString("no_resi");
                String nama = r.getString("nama_pengirim");
                String kontak = r.getString("no_kontak");
                String kurir = r.getString("kurir");
                
                Object[] data = { no_res, nama, kontak, kurir};
                m.addRow(data);
                //no++;                
            }
        } catch (Exception e) {
        }
    }

    private void loadData() {
        bt_hapus.setVisible(false);
        btn_batal.setVisible(false);
        tabel.clearSelection();
    }
    private void updateCardValues() {
        try {
            Connection connection = koneksi.konek();
            Statement statement = connection.createStatement();

            // Get the count of rows in the "kota_pengiriman" table
            ResultSet resultSet = statement.executeQuery("SELECT COUNT(*) as total FROM pengiriman");
            if (resultSet.next()) {
                int totalRows = resultSet.getInt("total");

                // Update the card values
                card1.setData(new model_card(new ImageIcon(getClass().getResource("/com/kelasC/assets/image/pengiriman.png")), "PENGIRIMAN", "Total Pengiriman : "+String.valueOf(totalRows), "Menunjukan Total Pengiriman"));
            }
            ResultSet resultSet1 = statement.executeQuery("SELECT kurir, COUNT(kurir) AS city_count FROM delivery GROUP BY kurir");

            // Find the city with the highest frequency
            String mostFrequentCity = "";
            int maxCityCount = 0;

            while (resultSet1.next()) {
                String cityName = resultSet1.getString("kurir");
                int cityCount = resultSet1.getInt("city_count");

                // Update most frequent city if the count is higher
                if (cityCount > maxCityCount) {
                    mostFrequentCity = cityName;
                    maxCityCount = cityCount;
                }
            }

            // Update card2 values with the most frequent city and its count
            card2.setData(new model_card(new ImageIcon(getClass().getResource("/com/kelasC/assets/image/delivery.png")), "PENGIRIMAN TERBANYAK", mostFrequentCity + " (" + maxCityCount + " pengiriman)", "Menunjukan Kuriri Yang paling aktif"));

            // Get the count of rows from another table (modify the query accordingly)
            ResultSet resultSet2 = statement.executeQuery("SELECT COUNT(*) as total FROM kota_pengiriman");
            if (resultSet2.next()) {
                int totalRows2 = resultSet2.getInt("total");

                // Update card3 values
                card3.setData(new model_card(new ImageIcon(getClass().getResource("/com/kelasC/assets/image/Place Marker.png")), "DESTINASI", "Jumlah Destinasi : "+String.valueOf(totalRows2), "Jumlah Destinasi saat Ini"));
            }
        } catch (Exception e) {
                e.printStackTrace();
        }
    }

    private void input() {
        String selectedKaryawan = cb_karyawan.getSelectedItem().toString();
        String noResi = txt_resi.getText();

        // Insert data into the 'delivery' table
        try {
            // Get a connection using the koneksi class
            Connection connection = koneksi.konek();

            // The SQL statement for inserting data into the 'delivery' table
            String sql = "INSERT INTO delivery (no_resi, nama_pengirim, no_kontak, kurir) " +
                         "SELECT no_resi, nama_pengirim, no_kontak, ? FROM pengiriman WHERE no_resi = ?";

            // Create a prepared statement
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            // Set values for parameters in the SQL statement
            preparedStatement.setString(1, selectedKaryawan);
            preparedStatement.setString(2, noResi);

            // Execute the query
            preparedStatement.executeUpdate();
            refreshtable();

            // Close the resources
            preparedStatement.close();
            connection.close();
            txt_resi.setText("");
            txt_resi.requestFocus();
            updateCardValues();
            tabel.clearSelection();

            // Optional: Display a success message or perform other actions

        } catch (SQLException e) {
            // Handle any SQL errors
            e.printStackTrace();
        }
    }
    
}
